            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Matty Williams          mw2122@ic.ac.uk
Kritik Pant             kp1222@ic.ac.uk
Shivam Subudhi          ss4522@ic.ac.uk
Atheepan Chandrakumaran ac4322@ic.ac.uk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

None

>> Please cite any offline or online sources you consulted while preparing your 
>> submission, other than the Pintos documentation, course text, lecture notes 
>> and course staff.

None

            PAGE TABLE/FRAME MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration that relates to your 
>> supplemental page table and frame table. 
>> Identify the purpose of each in roughly 25 words.


enum page_type
{
  FILE,
  FRAME,
  ZERO
};
The type of a page.

struct page
{
  struct hash_elem elem;
  void *key;
  bool writable;
  off_t offset;
  struct file *file;
  enum page_type type;
  bool present;
  bool write_back;
  struct frame *frame;
  off_t length;
  size_t swap; // swap slot number
};
The structure of a single page in the supplemental page table

struct page_table
{
  struct hash spt;
  uint32_t *pd;
  struct lock lock;
};
Structure of the spt

/* One frame to be stored in the frame table. */
struct frame {
  struct list_elem elem;
  void *page_phys_addr;
  void *page_user_addr;
  bool pinned;
  struct page_table *pt;
};

/* The frame table. */
struct list frame_table;

/* Lock used to control access to the frame table. */
struct lock frame_table_lock;

struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                          /* Thread identifier. */
  enum thread_status status;          /* Thread state. */
  char name[16];                      /* Name (for debugging purposes). */
  uint8_t *stack;                     /* Saved stack pointer. */
  int priority;                       /* Priority. */
  int effective_priority;             /* Effective priority. */
  int nice;                           /* Niceness. */
  fixed_point_t recent_cpu;           /* Recent CPU value for BSD Scheduler. */
  struct list_elem allelem;           /* List element for all threads list. */
  struct list owned_locks;
  struct lock *required_lock;
  
  /* Shared between thread.c and synch.c. */
  struct list_elem elem;              /* List element. */

#ifdef USERPROG
   /* Owned by userprog/process.c. */
   struct list open_files;             /* List of files open. */
   struct child_bond *child_bond;      /* Pointer to personal bond. */
   struct list child_bonds;            /* List of childrens bonds. */
   struct file *exec_file;             /* Current executable file */
   struct page_table page_table;
   struct list mapped_files;
   void *esp;
   bool is_user;
#endif

  /* Owned by thread.c. */
  unsigned magic;                     /* Detects stack overflow. */
};

We have added a flag is_user checking if its a user process. We also have a page_table and a saved esp

---- ALGORITHMS ----

>> A2: (2 marks) 
>> Describe your code for finding the frame (if any) or other location that 
>> contains the data of a given page.

Each page stores a pointer to a frame. search_pt can be used to search the page table 
and find the required page. This takes O(n) as we have used a hash table for our page_table. 
We can then return the frame field stored in the page.

>> A3: (2 marks)
>> How have you implemented sharing of read only pages?

In our current implementation, we did not have the opportunity to implement 
sharing of read-only pages. However, if we were to implement this feature, 
one possible approach would be to introduce a share table.

The share table could be a data structure that keeps track of shared 
read-only pages among different processes. Each entry in the share table might 
include information about the page, such as its location in memory and the 
number of processes currently sharing it.

When a process attempts to map a read-only page, instead of directly mapping 
it to the corresponding frame, the system would check the share table. If the 
page is already shared, the system would update the reference count in the 
share table and map the process to the existing shared frame. If the page is 
not yet shared, a new entry would be created in the share table, and the page 
would be mapped to a new frame as usual.

To ensure synchronization and consistency, the share table could be protected 
by appropriate locks to handle concurrent access by multiple processes. 
Additionally, reference counting could be employed to track the number of 
processes sharing a particular read-only page. When a process no longer needs 
the shared page, the reference count would be decremented, and if it reaches 
zero, the page could be unshared.

---- SYNCHRONIZATION ----

>> A4: (2 marks) 
>> When two user processes both need a new frame at the same time, how are 
>> races avoided? 
>> You should consider both when there are and are not free frames 
>> available in memory.

We have used a lock called the frame_table_lock to avoid race conditions.
Before accessing the frame table, we always acquire the lock and then release it
once a thread is done reading/modifying the table. A process must call make_present 
which acquires the lock before allocating any frames. It only releases the lock once this 
finishes so no race conditions exist. 

---- RATIONALE ----

>> A5: (2 marks)
>> Why did you choose the data structure(s) that you did for representing the
>> supplemental page table and frame table?

We used a list for the frame_table and a hash for the page_table. This allowed us the ease of 
using a list but still gain the speed advantage of the hash. Every page fault requires a search of 
the page table. Therefore using a hash is much better as it allows O(1) access. 


               PAGING TO AND FROM DISK
               =======================

---- ALGORITHMS ----

>> B2: (2 marks)
>> When a frame is required but none is free, some frame must be evicted.
>> Describe your code for choosing a frame to evict.

We implemented the second chance algorithm with pinning. The find_frame_to_evict function 
iterates through frames in the frame table using a hash iterator, checking the accessed 
bit in the page table entry to identify frames that haven't been recently used. We skip 
pinned frames and if we reach the end of the list, we go back to the beginning. Frames meeting this 
criteria are considered eviction candidates, and the function returns the selected frame. Otherwise, 
we set the accessed bit to false and give the frame a second chance.


>> B3: (2 marks)
>> When a process P obtains a frame that was previously used by a process Q,
>> how do you adjust the page directory of process Q (and any other data 
>> structures) to reflect the frame Q no longer has?

If a process P obtains a frame previously owned by process Q, the ownership of the frame is 
updated. Then, the mapping of the page directory of the frame would be marked as not present 
by pagedir_clear_page. The page is then swapped out by using swap_page_out which sets the page to not 
present.

---- SYNCHRONIZATION ----

>> B4: (2 marks)
>> Explain how your synchronization design prevents deadlock.  
>> (You may want to refer to the necessary conditions for deadlock.)

Deadlock occurs when two threads are each trying to acquire locks that the other
thread already holds. In our code we always use the same order when acquiring 
locks. We always acquire the frame table before any page table. This means that 
deadlock does not occur.

>> B5: (2 marks)
>> A page fault in process P can cause another process Q's frame to be evicted.
>> How do you ensure that Q cannot access or modify the page during the 
>> eviction process?

A page fault in P would call make_present. This locks the frame table and P's page table. 
If Q's page is evicted, we can get Q's page table as it is stored in the frame struct. 
We update Q's page directory and then swap out the page. During this, the page fault handler 
waits for Q's page table lock so Q's page can't be accessed during the swap.

>> B6: (2 marks)
>> A page fault in process P can cause another process Q's frame to be evicted.
>> How do you avoid a race between P evicting Q's frame and Q faulting the page
>> back in?

During a swap, the page fault handler waits for Q's page table lock so Q's page 
can't be accessed during the swap. Only after a swap is done can the fault handler continue.

>> B7: (2 marks)
>> Explain how you handle access to user pages that are not present when a
>> system call is made.

If a system call needs to acquire the frame table lock  or the file system lock, we ensure 
that no fault happens in the critical section as follows:
For integer, pointers or other small amount of data, we copy the code directly to the 
kernel stack so we don't need to access user space. For larger amounts of data, we pin each page 
so they can't be evicted inside a critical section. After that critical section, we unpin again.

---- RATIONALE ----

>> B8: (2 marks)
>> There is an obvious trade-off between parallelism and the complexity of your
>> synchronisation methods. 
>> Explain where your design falls along this continuum and why you chose to 
>> design it this way.

We have a lock for the global frame table and 1 for each page table. This allows some more 
parallelism than having 1 lock for all page tables. Page faults in different processes will not 
block each other. However, our locking is still not too fine grained so while we needed many checks and 
conditions we were able to have a slightly simpler strategy.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration that relates to your 
>> file mapping table.  
>> Identify the purpose of each in roughly 25 words.

/* Type used for uniquely identifying mapped_files. */
typedef int mapid_t;

/* A mapped file. */
struct mapped_file
{
    mapid_t mapid;          /* Unique id of mapped file. */
    struct file *file;      /* File that is being mapped. */
    void *addr;             /* Address of file in user space. */
    size_t page_count;      /* Number of pages in the file. */
    struct list_elem elem;  /* Used for adding to thread->mapped_files list. */
};

---- ALGORITHMS ----

>> C2: (3 marks)
>> Explain how you determine whether a new file mapping overlaps with any 
>> existing segment and how you handle such a case.

First, the function validates the input parameters, verifying that the 
file descriptor is not for standard input or output and that the address 
provided is non-null and page-aligned. After that, a loop iterates through 
the provided address range, using the available_page function to check for 
page availability. If any of the pages in the range is already in use, the 
function returns MAP_FAILED, indicating that an existing segment overlapped.

---- RATIONALE ----

>> C3: (1 mark)
>> Mappings created with "mmap" have similar semantics to those of data 
>> demand-paged from executables. 
>> How does your code-base take advantage of this?

The mmap implementation's create_file_page function is in charge of 
creating pages for the data in the file. The code dynamically loads 
portions of the file into memory on demand, using the demand-paging 
method commonly used for executable programmes. The memory is used 
by bringing in just the bits of the file that are accessed, 
similar to the demand-paging behaviour seen in executable files.