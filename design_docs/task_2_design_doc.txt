             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Matty Williams          mw2122@ic.ac.uk
Kritik Pant             kp1222@ic.ac.uk
Shivam Subudhi          ss4522@ic.ac.uk
Atheepan Chandrakumaran ac4322@ic.ac.uk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while preparing your 
>> submission, other than the Pintos documentation, course text, lecture notes 
>> and course staff.

None.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or `struct' member, 
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.

None


---- ALGORITHMS ----

>> A2: (2 marks)
>> How does your argument parsing code avoid overflowing the user's stack page?
>> What are the efficiency considerations of your approach?

Everytime we push onto the stack, we first check if there is enough space. This is done in the stack_push function. We also 
prefer to copy larger blocks on the stack first where possible for efficiency.


---- RATIONALE ----

>> A3: (2 marks)
>> Pintos does not implement strtok() because it is not thread safe. 
>> Explain the problem with strtok() and how strtok_r() avoids this issue.

The strtok() function uses global data which makes it unsafe to use with multiple threads.
This is because it can lead to race conditions as concurrent calls aren't synchronised. 
strtok_r() does not use global data so it is safe to use with multiple threads.


>> A4: (3 marks)
>> In Pintos, the kernel separates commands into an executable name and arguments. 
>> In Unix-like systems, the shell does this separation. 
>> Identify three advantages of the Unix approach.

1) It reduces the complexity of kernel code so is more safe and robust.
2) It is more flexible as it is up to the shell how to parse the arguments so modifying the 
    parsing rules doesn't require the kernel to be recompiled.
3) In the Unix system, the arguments can be tokenised in another thread which means that a higher priority 
    thread can interrupt and run before the argument tokenising is complete.


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (6 marks) 
>> Copy here the declaration of each new or changed `struct' or `struct' member, 
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.

#define NUM_CALLS 13

Constant storing the number of different system calls that the user programs can make.

/* Lock used to restrict access to the file system. */
struct lock filesystem_lock;

/* Struct used to track return value of child processes. */
struct child_bond
{
  tid_t child_tid;        /* The tid of the child process. */
  int exit_status;        /* The return value of the child process, default is -1. */
  struct list_elem elem;  /* List element used in thread->child_bonds list. */
  struct semaphore sema;  /* Semaphore used to wait for the child process. */
  int connections;        /* Holds the number of active processes connected to this bond.
                             The bond will be freed when connections becomes 0. */
  struct lock lock;       /* Lock used to control access to the bond. */
};

/* Struct used to pass parameters required to set up a process. */
struct process_setup_params
{
  struct child_bond *child_bond;
  char *cmd_line;
};

/* Element used to add a file to a list of open files. */
struct open_file
{
  struct list_elem elem;  /* List element used in thread->open_files list. */
  int fd;                 /* File descriptor. */
  struct file *file;      /* File struct. */
};

/* Thread changed to include members required for user programs */
struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                          /* Thread identifier. */
  enum thread_status status;          /* Thread state. */
  int status_of_exit;
  char name[16];                      /* Name (for debugging purposes). */
  uint8_t *stack;                     /* Saved stack pointer. */
  int priority;                       /* Priority. */
  int effective_priority;             /* Effective priority. */
  int nice;                           /* Niceness. */
  fixed_point_t recent_cpu;           /* Recent CPU value for BSD Scheduler. */
  struct list_elem allelem;           /* List element for all threads list. */
  struct list owned_locks;
  struct lock *required_lock;


  /* Shared between thread.c and synch.c. */
  struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    struct list open_files;             /* List of files open. */
    struct child_bond *child_bond;      /* Pointer to personal bond. */
    struct list child_bonds;            /* List of childrens bonds. */
    struct file *exec_file;             /* Current executable file. */
#endif

  /* Owned by thread.c. */
  unsigned magic;                     /* Detects stack overflow. */
};

---- ALGORITHMS ----

>> B2: (2 marks)
>> Describe how your code ensures safe memory access of user provided data from
>> within the kernel. 

We use the read_write_user() and safe_copy_user() functions to safely access memory.
These functions check bytes one by one using the get_user() function to ensure 
they are within user memory before dereferencing them.

Furthermore, if there is an invalid user pointer, the page_fault function in exception.c 
copies eax into eip and then sets the value of eax to 0xffffffff.

>> B3: (3 marks)
>> Suppose that we choose to verify user provided pointers by validating them 
>> before use (i.e. using the first method described in the spec).
>> What is the least and the greatest possible number of inspections of the page
>> table (e.g. calls to pagedir_get_page()) that would need to be made in the 
>> following cases?

>> a) A system call that passes the kernel a pointer to 10 bytes of user data.

Best case: 1 inspection.
Worst case: 2 inspections.
If the buffer lies on a page boundary, we need to check that both pages are valid. 
Otherwise, we only need to check 1 page


>> b) A system call that passes the kernel a pointer to a full page 
>>    (4,096 bytes) of user data.

Best case: 1 inspection.
Worst case: 2 inspections.
4096 bytes can either fit in a single page or across 2 pages


>> c) A system call that passes the kernel a pointer to 4 full pages 
>>    (16,384 bytes) of user data.

Best case: 4 inspections.
Worst case: 5 inspections.
As 4095 bytes is the max virtual page size, we will need to verify at least 4 pages. 
However, depending on how data is organised we might need to check a 5th page.


>> You must briefly explain the checking tactic you would use and how it applies 
>> to each case to generate your answers.

>> B4: (2 marks)
>> When an error is detected during a system call handler, how do you ensure 
>> that all temporarily allocated resources (locks, buffers, etc.) are freed?

In the syscall handler, we check that the arguments have been read correctly from 
user memory, if not the thread exits.
Then, if necessary, we get a new page from the filesystem to store a copy of one 
of the arguments. We ensure this page is freed before the function returns.
Furthermore, if any check fails, the temporarily allocated resources are freed before thread_exit 
is called. This also calls process_exit so that all resources are freed for the process including child_bond 
and open_file.


>> B5: (8 marks)
>> Describe your implementation of the "wait" system call and how it interacts 
>> with process termination for both the parent and child.

The "wait" system call safely reads the pid of the child from the stack before calling the 
process_wait() function with this value.

The parent thread contains a list of the child_bonds of all child threads. 
process_wait() searches through the parent's list of child bonds until it finds the bond 
of the child with the same pid. It then downs the semaphore, causing the parent to wait 
until this child terminates. On termination, the child will up the semaphore again. 
Just before the child terminates, it will write its exit status to the child bond. 
Then the parent will remove this bnond from its list of bonds, read the exit status
of the child, and then lose its connection to the bond before finally returning the exit status.
When the parent is terminated, the child_bonds list will be freed.


---- SYNCHRONIZATION ----

>> B6: (2 marks)
>> The "exec" system call returns -1 if loading the new executable fails, so it 
>> cannot return before the new executable has completed loading. 
>> How does your code ensure this? 

A semaphore in child_bond is shared between parent and child threads through the child_bond struct. 
During the "exec" system call the semaphore is downed by the parent process, which then waits for the child to up the semaphore 
after all necessary initialisation is done, including loading the executable file. 
The parent process will then wake up and return the tid value contained in the child_bond of the child, 
and if the child process fails to run, the tid will be set to -1.


>> How is the load success/failure status passed back to the thread that calls 
>> "exec"?

>> B7: (5 marks)
>> Consider parent process P with child process C. 
>> How do you ensure proper synchronization and avoid race conditions when: 
>>   i) P calls wait(C) before C exits?

Process P will down the semaphore contained in the child bond between P and C.
This will cause P to sleep until the semaphore is upped by process C.
C will eventually terminate and write its exit status to the bond, before upping the semaphore. 
At which point P will wake up and read the exit status left by C. This avoids race conditions as 
C will have terminated before P reads the exit status, so it will no longer modify the exit status.


>>  ii) P calls wait(C) after C exits?

Process P will down the semaphore contained in the child bond between P and C.
This will cause P to call sema_down(), however, as C has already terminated and called sema_up(),
P will not sleep and will continue execution instead. Now P can read the exit status left by C and
does not have to worry about race conditions as C has already terminated and will not modify exit status again.


>> iii) P terminates, without waiting, before C exits?

If P terminates before C exists, C will never be created, therefore there are no
problems with synchronization or race conditions as P will never access any data 
that has been accessed by C.


>>  iv) P terminates, without waiting, after C exits?

If P terminates while C exists, P will let go of its connection to the bond with C.
This removes the child bond from P's list of child_bonds, meaning that P will no 
longer be able to modify any data in the child_bond, eliminating the possibility of
race condtions.



>> Additionally, how do you ensure that all resources are freed regardless of 
>> the above case? 

The child_bond struct contains an integer called connections which stores the number of 
processes connected to the struct. The number of connections is initialised to 1 by P 
and is then incremented again if process C is created successfully.
When a process is terminated, it calls the process_lose_connection function which decrements 
the number of connections to the struct.
When the number of connections becomes 0, the struct is freed.
This way it does not matter which order the parent and child are terminated in, as the child_bond 
struct is always freed whenever both the parent and child thread have terminated.



---- RATIONALE ----

>> B8: (2 marks)
>> Why did you choose to implement safe access of user memory from the kernel in 
>> the way that you did?

Modifying the page_fault function is faster as it takes advantage of the MMU. Since it 
is used in real kernels, we thought it would be best to use this approach here as well. 
Furthermore, get_user could deal with memory access errors easily and be incorporated into 
read_write_user() and safe_copy_user() functions.


>> B9: (2 marks)
>> What advantages and disadvantages can you see to your design for file 
>> descriptors?

An advantage to our design for file descriptors is that it does a good job at abstracting
away the complexity of the file system as you do not have to keep track of the exact
memory address of the file, just an integer which can be mapped to the correct memory location.
This also makes it more difficult for threads to directly access files without permission 
which they could do if the file descriptor was the address of the file.
This is important as the file system is not inherently synchronised so access must be controlled.

Our design for file descriptors has disadvantages, for example it takes time to 
search throught the list of open files to file the file with the file descriptor
value that you are searching for. And also the list of open files require memory 
to be allocated and freed which takes time and must be written thoughtfully by 
the programmer.